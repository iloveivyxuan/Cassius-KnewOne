- provide :nav, :reviews
- content_for :content
  .spinner-fullscreen
    em 正在加载
  = form_for [@thing, @review], html: {class: "editor", id: "form-review"} do |f|
    .editor-menu
      p.editor-target
        | 正在为
        = link_to @thing.title, @thing, target: "_blank"
        | 写评测
      output
      .pull-right
        button.editor-help-toggle type="button" data-toggle="modal" data-target="#editor-help"
          i.fa.fa-question.fa-alone
        button.editor-close type="button" 退出
        button.editor-drop type="button" 舍弃
        button.editor-save type="button" 保存
        button.editor-submit type="submit" 发布
    article.editor-content.article
      header
        = f.text_field :title, class: "title", required: true, autocomplete: "off", placeholder: "标题"
        .editor-metas
          .form-group
            label 评分：
            = f.range_field :score, max: 5, min: 0, class: "range-rating"
          .form-group
            label 置顶：
            = f.check_box :is_top
          - if @review.persisted?
            .form-group
              label 作者：
              = hidden_field_tag 'review[author]', @review.author.id.to_s, id: 'author_id'
              input#author_autocomplete.form-control placeholder="用户昵称" value="#{@review.author.name}"
      .body#form-review-body
      = f.hidden_field :content
  = attachment_tag target: "#pictureBtn", edit: "insertImage"
  = render "shared/editor_help"

- content_for :script do
  javascript:
    new Making.Views.Editor({
      el: '#form-review',
      model: new Making.Models.Editor(),
      mode: 'standalone',
      type: 'review'
    });
    Making.UserFuzzy('#author_autocomplete', '#author_id');
