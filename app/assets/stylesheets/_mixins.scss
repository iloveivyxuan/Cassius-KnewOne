@import "compass/css3";
@import "compass/layout/stretching";

@mixin plain-link($color: $text-color) {
  &,
  &:focus,
  &:hover {
    color: $color;
  }
}

// Layout
// -----------------------------------------------------------------------------

@mixin make-inline-block-column {
  float: none !important;
  display: inline-block;
}

// http://dropshado.ws/post/1015351370/webkit-line-clamp
@mixin multi-line-text-overflow($n, $line-height) {
  display: block;
  overflow: hidden;
  line-height: $line-height;
  max-height: $n * $line-height;

  display: -webkit-box;
  -webkit-line-clamp: $n;
  -webkit-box-orient: vertical;
}

// http://stackoverflow.com/questions/7492062/css-overflow-scroll-always-show-vertical-scroll-bar
@mixin always-show-scrollbar {
  &::-webkit-scrollbar {
    -webkit-appearance: none;
    width: 7px;
  }

  &::-webkit-scrollbar-thumb {
    border-radius: 4px;
    background-color: rgba(0, 0, 0, .5);
    -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);
  }
}

// Page main section wrapper.
//
// @mixin wrapper(empty)  - No style.
// @mixin wrapper(grid)   - Bootstrap grid system, none style.
// @mixin wrapper(simple) - Single column, max-width: $screen-md-min.
//

@mixin wrapper($layout, $columns: -1, $max-width: none) {
  @if $layout == empty {
    margin: 0;
  } @else if $layout == grid {
    @include make-row;

    margin: 0;

    @media screen and (min-width: $screen-sm-min) {
      margin: 0 calc(#{$wrapper_margin} - 15px);
    }

    @if $columns >= 0 {
      @include decoration;

      padding: {
        bottom: 20px;
        top: 20px;
      }

      @media screen and (min-width: $screen-sm-min) {
        padding: {
          bottom: 40px;
          top: 40px;
        }
      }

      @media screen and (min-width: $screen-lg-min + 100) {
        margin: {
          left: auto;
          right: auto;
        }
        width: $screen-lg-min;
      }

      @if $columns == 2 {
        > main, > section {
          @include make-md-column(9, $gutter: 40px);

          @media screen and (min-width: $screen-md-min) {
            padding: {
              left: 2em;
              right: 2em;
            }
          }
        }

        > aside, > header {
          @include make-md-column(3, $gutter: 40px);

          @media screen and (min-width: $screen-md-min) {
            border-left: $border-default;
            padding: {
              left: 2em;
              right: 2em;
            }
          }
        }
      }
    }

  } @else if $layout == simple {
    @include decoration;

    margin-bottom: 1em;
    padding: 2em;

    @if $max-width != none {
      @media screen and (min-width: $max-width + 100) {
        margin: {
          left: auto;
          right: auto;
        }
        width: $max-width;
      }
    }
  }
}

// UI Component
// -----------------------------------------------------------------------------

@mixin decoration {
  background-color: #fff;
  box-shadow: 0 1px 2px #ccc;

  @media screen and (min-width: $screen-sm-min) {
    border-radius: 8px;
  }
}

@mixin stretch_img() {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 100%;
  text-align: center;

  img {
    @include stretch;
    margin: auto;
    max-height: 100%;
    max-width: 100%;
  }
}

@mixin button_compact($background-color, $color) {
  @include transition-property(background-color, border-color, color);
  @include transition-duration(.2s);

  background-color: transparent;
  border-color: $color;
  color: $color;

  &:hover,
  &:focus {
    background-color: $color;
    color: $background-color;
  }
}

@mixin button-inverse($background-color, $color) {
  background-color: $background-color;
  color: $color;

  &:hover,
  &:focus,
  &:active {
    background-color: $color;
    color: $background-color;
  }
}

@mixin imgtxt ($float, $gap, $text) {
  @include clearfix;

  > img {
    float: $float;
    @if $float == left {
      margin-right: $gap;
    } @else if $float == right {
      margin-left: $gap;
    }
  }

  #{$text} {
    overflow: hidden;
  }
}

@mixin placeholder-color($color) {
  &::-webkit-input-placeholder { /* WebKit browsers */
    color: $color;
  }

  &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
      color: $color;
      opacity:  1;
  }

  &::-moz-placeholder { /* Mozilla Firefox 19+ */
      color: $color;
      opacity:  1;
  }

  &:-ms-input-placeholder { /* Internet Explorer 10+ */
      color: $color;
  }
}

@mixin mask {
  font-size: 0;
  height: 0;
  line-height: 0;
  margin: 0;
  opacity: 0;
  overflow: hidden;
  padding: 0;
}


// Effect
// -----------------------------------------------------------------------------

@mixin keyframes($animation_name) {
  @-webkit-keyframes #{$animation_name} {
    @content;
  }

  @-moz-keyframes #{$animation_name} {
    @content;
  }

  @-o-keyframes #{$animation_name} {
    @content;
  }

  @keyframes #{$animation_name} {
    @content;
  }
}

@mixin grayscale($percentage) {
  -webkit-filter: grayscale($percentage);
  -moz-filter: grayscale($percentage);
  -ms-filter: grayscale($percentage);
  -o-filter: grayscale($percentage);
  filter: grayscale($percentage);
}

@mixin vertical-list-item {
  padding: 1em 0;
  &:not(:last-child) {border-bottom: $border-dashed;}
}

// Media queries
// -----------------------------------------------------------------------------

@mixin from-breakpoint($class) {
  @if $class == xs {
    @media (min-width: 0px) { @content; }
  } @else if $class == sm {
    @media (min-width: $screen-sm-min) { @content; }
  } @else if $class == md {
    @media (min-width: $screen-md-min) { @content; }
  } @else if $class == lg {
    @media (min-width: $screen-lg-min) { @content; }
  } @else {
    @warn "Not supported";
  }
}

@mixin to-breakpoint($class) {
  @if $class == xs {
    @media (max-width: $screen-xs-max) { @content; }
  } @else if $class == sm {
    @media (max-width: $screen-sm-max) { @content; }
  } @else if $class == md {
    @media (max-width: $screen-md-max) { @content; }
  } @else if $class == lg {
    @media (max-width: $screen-lg-max) { @content; }
  } @else {
    @warn "Not supported";
  }
}

@mixin MQ($canvas) {
  $XS: 320px;
  $S:  480px;
  $M:  768px;
  $L:  992px;
  $XL: 1200px;

  @if $canvas == XS {
    @media only screen and (min-width: $XS) and (max-width: $S - 1) { @content; }
  }
  @else if $canvas == S {
    @media only screen and (min-width: $S) and (max-width: $M - 1) { @content; }
  }
  @else if $canvas == M {
    @media only screen and (min-width: $M) and (max-width: $L - 1) { @content; }
  }
  @else if $canvas == L {
    @media only screen and (min-width: $L) and (max-width: $XL - 1) { @content; }
  }
  @else if $canvas == XL {
    @media only screen and (min-width: $XL) and (max-width: $XXL - 1) { @content; }
  }
  @else if $canvas == XSplus {
    @media only screen and (min-width: $XS) { @content; }
  }
  @else if $canvas == Splus {
    @media only screen and (min-width: $S) { @content; }
  }
  @else if $canvas == Mplus {
    @media only screen and (min-width: $M) { @content; }
  }
  @else if $canvas == Lplus {
    @media only screen and (min-width: $L) { @content; }
  }
  @else if $canvas == XLplus {
    @media only screen and (min-width: $XL) { @content; }
  }
  @else if $canvas == XSneg {
    @media only screen and (max-width: $XS - 1) { @content; }
  }
  @else if $canvas == Sneg {
    @media only screen and (max-width: $S - 1) { @content; }
  }
  @else if $canvas == Mneg {
    @media only screen and (max-width: $M - 1) { @content; }
  }
  @else if $canvas == Lneg {
    @media only screen and (max-width: $L - 1) { @content; }
  }
  @else if $canvas == XLneg {
    @media only screen and (max-width: $XL - 1) { @content; }
  }
  @else if $canvas == StoL {
    @media only screen and (min-width: $S) and (max-width: $L - 1) { @content; }
  }
}
