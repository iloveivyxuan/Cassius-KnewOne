@import "compass/css3";
@include font-face("orbitron-bold", font-files(
                     "orbitron-bold.woff", woff,
                     "orbitron-bold.ttf", truetype,
                     "orbitron-bold.svg", svg),
                   "orbitron-bold.eot");

@include font-face("orbitron-medium", font-files(
                     "orbitron-medium.woff", woff,
                     "orbitron-medium.ttf", truetype,
                     "orbitron-medium.svg", svg),
                   "orbitron-medium.eot");

// Layout
// -----------------------------------------------------------------------------

// Generate the extra large columns
@mixin make-xl-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  // Calculate width based on number of columns available
  @media (min-width: $screen-xl-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

// Generate the large column offsets
@mixin make-xl-column-offset($columns) {
  @media (min-width: $screen-xl-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

@mixin make-xl-column-push($columns) {
  @media (min-width: $screen-xl-min) {
    left: percentage(($columns / $grid-columns));
  }
}

@mixin make-xl-column-pull($columns) {
  @media (min-width: $screen-xl-min) {
    right: percentage(($columns / $grid-columns));
  }
}

@mixin make-inline-block-column {
  float: none !important;
  display: inline-block;
}

// UI Component
// -----------------------------------------------------------------------------

@mixin decoration {
  background-color: #fff;
  box-shadow: 0 1px 2px #ccc;

  @media screen and (min-width: $screen-sm-min) {
    border-radius: 8px;
  }
}

@mixin fontawesome($content) {
  display: inline-block;
  font-family: FontAwesome;
  font-weight: normal;
  font-style: normal;

  &:before {
    content: $content;
  }
}

@mixin stretch($offset-top: 0, $offset-right: 0, $offset-bottom: 0, $offset-left: 0) {
  position: absolute;
  @if $offset-top {
    top: $offset-top;
  }
  @if $offset-bottom {
    bottom: $offset-bottom;
  }
  @if $offset-left {
    left: $offset-left;
  }
  @if $offset-right {
    right: $offset-right;
  }
}

@mixin stretch_img() {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 100%;
  text-align: center;

  img {
    @include stretch;
    margin: auto;
    max-height: 100%;
    max-width: 100%;
  }
}

@mixin button_compact($background-color, $color) {
  @include transition-property(background-color, border-color, color);
  @include transition-duration(.2s);

  background-color: transparent;
  border-color: $color;
  color: $color;

  &:hover,
  &:focus {
    background-color: $color;
    color: $background-color;
  }
}

@mixin button_inverse($background-color, $color) {
  background-color: $background-color;
  color: $color;

  &:hover,
  &:focus,
  &:active {
    background-color: $color;
    color: $background-color;
  }
}

@mixin imgtxt ($float, $gap, $text) {
  @include clearfix;

  > img {
    float: $float;
    @if $float == left {
      margin-right: $gap;
    } @else if $float == right {
      margin-left: $gap;
    }
  }

  #{$text} {
    overflow: hidden;
  }
}

@mixin placeholder-color($color) {
  &::-webkit-input-placeholder { /* WebKit browsers */
    color: $color;
  }

  &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
      color: $color;
      opacity:  1;
  }

  &::-moz-placeholder { /* Mozilla Firefox 19+ */
      color: $color;
      opacity:  1;
  }

  &:-ms-input-placeholder { /* Internet Explorer 10+ */
      color: $color;
  }
}

@mixin mask {
  font-size: 0;
  height: 0;
  line-height: 0;
  margin: 0;
  opacity: 0;
  overflow: hidden;
  padding: 0;
}


// Effect
// -----------------------------------------------------------------------------

@mixin keyframes($animation_name) {
  @-webkit-keyframes $animation_name {
    @content;
  }

  @-moz-keyframes $animation_name {
    @content;
  }

  @-o-keyframes $animation_name {
    @content;
  }

  @keyframes $animation_name {
    @content;
  }
}

@mixin grayscale($percentage) {
  -webkit-filter: grayscale($percentage);
  -moz-filter: grayscale($percentage);
  -ms-filter: grayscale($percentage);
  -o-filter: grayscale($percentage);
  filter: grayscale($percentage);
}

@mixin vertical-list-item {
  padding: 1em 0;
  &:not(:last-child) {border-bottom: $border-dashed;}
}

// Media queries
// -----------------------------------------------------------------------------

@mixin breakpoint($class) {
  @if $class == xs {
    @media (min-width: 0px) { @content; }
  } @else if $class == sm {
    @media (min-width: $screen-sm-min) { @content; }
  } @else if $class == md {
    @media (min-width: $screen-md-min) { @content; }
  } @else if $class == lg {
    @media (min-width: $screen-lg-min) { @content; }
  } @else if $class == xl {
    @media (min-width: $screen-xl-min) { @content; }
  } @else {
    @warn "Not supported";
  }
}

@mixin MQ($canvas) {
  $XS: 320px;
  $S:  480px;
  $M:  768px;
  $L:  992px;
  $XL: 1441px;

  @if $canvas == XS {
    @media only screen and (min-width: $XS) and (max-width: $S - 1) { @content; }
  }
  @else if $canvas == S {
    @media only screen and (min-width: $S) and (max-width: $M - 1) { @content; }
  }
  @else if $canvas == M {
    @media only screen and (min-width: $M) and (max-width: $L - 1) { @content; }
  }
  @else if $canvas == L {
    @media only screen and (min-width: $L) and (max-width: $XL - 1) { @content; }
  }
  @else if $canvas == XL {
    @media only screen and (min-width: $XL) and (max-width: $XXL - 1) { @content; }
  }
  @else if $canvas == XSplus {
    @media only screen and (min-width: $XS) { @content; }
  }
  @else if $canvas == Splus {
    @media only screen and (min-width: $S) { @content; }
  }
  @else if $canvas == Mplus {
    @media only screen and (min-width: $M) { @content; }
  }
  @else if $canvas == Lplus {
    @media only screen and (min-width: $L) { @content; }
  }
  @else if $canvas == XLplus {
    @media only screen and (min-width: $XL) { @content; }
  }
  @else if $canvas == XSneg {
    @media only screen and (max-width: $XS) { @content; }
  }
  @else if $canvas == Sneg {
    @media only screen and (max-width: $S) { @content; }
  }
  @else if $canvas == Mneg {
    @media only screen and (max-width: $M) { @content; }
  }
  @else if $canvas == Lneg {
    @media only screen and (max-width: $L - 1) { @content; }
  }
  @else if $canvas == XLneg {
    @media only screen and (max-width: $XL) { @content; }
  }
  @else if $canvas == StoL {
    @media only screen and (min-width: $S) and (max-width: $L - 1) { @content; }
  }
}
